
node('master') {
  checkout scm
  List allServices = sh (
    script: "source ~/.bashrc && npx lerna list -alp | grep \"\$(pwd)/services/\"",
    returnStdout: true
  ).trim().split('\n')
  List changedServices = sh (
    script: 'source ~/.bashrc && npx lerna changed --include-merged-tags -alp | grep \"\$(pwd)/services/\"',
    returnStdout: true
  ).trim().split('\n')
  stage('Install') {
    sh 'source ~/.bashrc && npm i'
    sh 'source ~/.bashrc && npx lerna bootstrap'
  }
  def stashName = "build-stash-${BUILD_NUMBER}"
  stage('Stash') {
    stash includes: "**", name: stashName
  }
  stage('Test') {
    def servicesToTest = [:]
    allServices.each { service ->
      def (path, name, version) = service.tokenize(':')
      def serviceStageName = "${name}@${version}".replaceAll("@scotsoo/", "")
      def findResult = changedServices.find { changedService ->
        def (cpath, cname, cversion) = changedService.tokenize(':')
        return cname == name
      }
      if (findResult == null) {
        servicesToTest[serviceStageName] = {
          Utils.markStageSkippedForConditional(serviceStageName)
        }
      } else {
        servicesToTest[serviceStageName] = {
          node('worker') {
            stage('Test') {
              def workerPath = path.replaceAll('/var/lib/jenkins/', '/jenkins/')
              unstash stashName
              dir (workerPath) {
                sh "npm run test"
              }
            }
          }
        }
      }
    }
    parallel servicesToTest
  }

  stage('Build') {
    def servicesToBuild = [:]
    allServices.each { service ->
      def (path, name, version) = service.tokenize(':')
      def serviceStageName = "${name}@${version}".replaceAll("@scotsoo/", "")
      def findResult = changedServices.find { changedService ->
        def (cpath, cname, cversion) = changedService.tokenize(':')
        return cname == name
      }
      if (findResult == null) {
        servicesToBuild[serviceStageName] = {
          Utils.markStageSkippedForConditional(serviceStageName)
        }
      } else {
        servicesToBuild[serviceStageName] = {
          node('worker') {
            stage('Test') {
              def workerPath = path.replaceAll('/var/lib/jenkins/', '/jenkins/')
              unstash stashName
              dir (workerPath) {
                def configFile = load "./config.groovy"
                def config = configFile.getPipelineConfig()
                if (config['build'] == 'docker') {
                  sh "docker build ."
                }
                if (config['build'] == 'npm') {
                  sh "npm run build"
                }
              }
            }
          }
        }
      }
    }
    parallel servicesToBuild
  }
}