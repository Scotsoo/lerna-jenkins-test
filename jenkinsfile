pipeline {
  agent any
  stages {
    stage('Install') {
      steps {
        script {
          sh 'source ~/.bashrc && npm i'
          sh 'source ~/.bashrc && npx lerna bootstrap'
        }
      }
    }
    stage('Test') {
      steps {
        script {
          List allServices = sh (
            script: "npx lerna list -alp | grep \"\$(pwd)/services/\"",
            returnStdout: true
          ).trim().split('\n')
          List changedServices = sh (
            script: 'npx lerna changed --include-merged-tags -alp | grep \"\$(pwd)/services/\"',
            returnStdout: true
          ).trim().split('\n')
          def servicesToBuild = [:]
          allServices.each { service ->
            def (path, name, version) = service.tokenize(':')
            def serviceStageName = "${name}@${version}".replaceAll("@scotsoo/", "")
            def findResult = CHANGED_SERVICES.find { changedService ->
              def (cpath, cname, cversion) = changedService.tokenize(':')
              return cname == name
            }
          }
          if (findResult == null) {
            servicesToBuild[serviceStageName] = {
              Utils.markStageSkippedForConditional(serviceStageName)
            }
          } else {
            servicesToBuild[serviceStageName] = build job: "UnitTest", wait: true
          }
          parallel servicesToBuild
        }
      }
    }
  }
}